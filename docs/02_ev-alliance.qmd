---
title: '02 Independent Variable and Controls'
author:
  - name: J Andrés Gannon
    email: "juan.gannon@vanderbilt.edu"
    url: jandresgannon.com
    affiliation: Vanderbilt University
format:
  html:
    fig-format: png
editor: source
jupyter: python3
execute:
  echo: false
  warning: false
  cache: true
date: today
date-format: long
header-includes:
- \usepackage{tikz}
- \usepackage{pgfplots}
- \pgfplotsset{compat=newest}
- \usetikzlibrary{plotmarks}
- \usetikzlibrary{arrows.meta}
- \usepgfplotslibrary{patchplots}
- \usepackage{grffile}
- \usepackage{caption}
- \usepackage[utf8]{inputenc}
- \usepackage[doublespacing]{setspace}
- \AtBeginEnvironment{tabular}{\singlespacing}
- \usepackage{float}
- \usepackage{multirow}
- \usepackage{tablefootnote}
- \usepackage{pifont}
- \usepackage{newunicodechar}
- \usepackage{booktabs}
- \usepackage{tabularx}
- \newunicodechar{✓}{\ding{51}}
bibliography: ForceStructure.bib
---

# Set up

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(tidyverse)
```

This document creates alliance-year covariates

# Create composite variables

Some variables are already at the alliance level of analysis from the above datasets, but others have to be created from a country-year set. So we start by making a country-year dataframe and then merging it into alliance-years to make composite variables

## country-year base

Better regime type measure than polity given missingness is `xm_qudsest` which comes from @pemstein_democraticcompromiselatent_2017 and where positive values should be coded as 1 in a binary variable

```{r load-psci-cyear}
# From ATOP, since those are the actors we're interested in
country_year <- rio::import(paste0(here::here(), "/inst/extdata/ATOP/atop5_1m.csv")) %>%
  dplyr::filter(yrexit > 1970 |
                  yrexit == 0) %>%
  dplyr::mutate(yrexit = dplyr::if_else(yrexit == 0,
                                        2023,
                                        yrexit)) %>%
#  dplyr::filter(defense == 1) %>%
  dplyr::select(atopid, member, yrent, yrexit) %>%
  dplyr::distinct() %>%
  dplyr::mutate(row = dplyr::row_number()) %>%
  dplyr::group_by(row, atopid, member) %>%
  dplyr::reframe(year = seq(yrent, yrexit)) %>%
  dplyr::ungroup() %>%
  dplyr::select(-row) %>%
  dplyr::rename(ccode = 'member') %>%
  dplyr::filter(year %in% c(1970:2014)) %>%
  dplyr::distinct()

# Add variable for alliance duration
time <- rio::import(paste0(here::here(), "/inst/extdata/ATOP/atop5_1m.csv")) %>%
  dplyr::select(atopid, ccode = member, yrent) |>
  dplyr::slice_min(yrent, by = c(atopid, ccode)) |>
  dplyr::distinct()

country_year <- dplyr::left_join(country_year, time) %>%
  dplyr::mutate(alliance_age = year - yrent) %>%
  dplyr::select(-yrent) %>%
  dplyr::filter(alliance_age >= 0)

# atopsscore <- rio::import(paste0(here::here(), "/inst/extdata/ATOP/atop-sscore.csv")) %>% dplyr::select(atopid, ccode = member, yrent)

# Create country-years with a bunch of useful covariates
library(peacesciencer)

country_year_psci <- create_stateyears(system = "cow",
                                 subset_years = c(1970:2014)) %>%
  add_contiguity() %>%
  add_cow_majors() %>%
  add_democracy() %>%
  add_nmc() %>%
  add_sdp_gdp() %>%
#  add_strategic_rivalries() %>%
  dplyr::mutate(demo = dplyr::if_else(polity2 >= 6, 1, 0),
                demo_qudsest = xm_qudsest)

df <- dplyr::left_join(country_year, country_year_psci) %>%
  dplyr::distinct() %>%
  dplyr::summarise(cinc_dispersal = (sd(cinc, na.rm = TRUE) / mean(cinc, na.rm = TRUE)),
                   cinc_asymmetry = max(cinc, na.rm = TRUE) - min(cinc, na.rm = TRUE),
                   cinc_total = sum(cinc),
                   cinc_totalsq = (cinc_total)^2,
                   gp_ratio = mean(cowmaj, na.rm = TRUE),
                   asymmetric = dplyr::if_else(gp_ratio > 0 | gp_ratio < 1, 1, 0),
                   demo_polityavg = mean(polity2, na.rm = TRUE),
                   demo_politylowest = min(polity2, na.rm = TRUE),
                   demo_polityprop = mean(demo, na.rm = TRUE),
                   demo_politydiff = max(polity2, na.rm = TRUE) - min(polity2, na.rm = TRUE),
                   demo_sameregime = dplyr::if_else(demo_polityprop == 0 | demo_polityprop == 1, 1, 0),
                   demo_udsavg = mean(demo_qudsest, na.rm = TRUE),
                   demo_udslowest = min(demo_qudsest, na.rm = TRUE),
                   demo_udsdiff = max(demo_qudsest, na.rm = TRUE) - min(demo_qudsest, na.rm = TRUE),
                   members = dplyr::n(),
                   members_sq = dplyr::n()^2,
                   allianceage_avg = mean(alliance_age, na.rm = TRUE),
                   allianceage_avgsq = allianceage_avg^2,
                   allianceage_longest = max(alliance_age, na.rm = TRUE),
                   allianceage_longestsq = allianceage_longest^2,
                   .by = c(atopid, year))
```

## dyad-year base

```{r load-psci-dyadyear}
# Create dyad-years with a bunch of useful covariates
dyads <- create_dyadyears(system = "cow",
                          subset_years = c(1970:2014),
                          directed = FALSE) %>%
  add_capital_distance() %>%
  add_contiguity() %>%
  add_fpsim() %>%
  mutate(landcontig = dplyr::if_else(conttype == 1, 1, 0),
         capdist = dplyr::if_else(landcontig == 1, 0, capdist))

# Updated peace data scores
peace3 <- read.csv(paste0(here::here(), "/inst/extdata/DiehlPeaceData/peacedatav31dyyearmean.csv"),
                  colClasses = "character") |>
  dplyr::rename(year = yearmonth) |>
  dplyr::mutate(ccode2 = stringr::str_sub(dyad, -3),
                ccode1 = stringr::str_sub(dyad, 1, -4),
                ccode1 = as.numeric(ccode1),
                ccode2 = as.numeric(ccode2),
                year = as.numeric(year),
                peacelevel = as.numeric(peacelevel)) |>
  # Fix Germany ccode issue noted in their readme file
  dplyr::mutate(ccode1 = dplyr::if_else(year > 1955 & year < 1991 & ccode1 == 255, 260, ccode1),
                ccode2 = dplyr::if_else(year > 1955 & year < 1991 & ccode2 == 255, 260, ccode2)) |>
  dplyr::select(-dyad) |>
  dplyr::filter(!peacelevel > 1)

dyads <- dplyr::left_join(dyads, peace3)

# Get all dyads for first member of that alliance
dyad_year <- dplyr::left_join(country_year, dyads,
                              by = join_by(ccode == ccode1,
                                           year == year)) %>%
  dplyr::distinct()

# Filter for 2nd member of the dyad being in that alliance
country_year <- country_year %>%
  dplyr::mutate(keep = 1)

dyad_year <- dplyr::left_join(dyad_year, country_year,
                              by = join_by(atopid == atopid,
                                           year == year,
                                           ccode2 == ccode)) %>%
  dplyr::filter(keep == 1) %>%
  dplyr::select(-keep)

dyad_year <- dyad_year %>%
  dplyr::summarise(strcomp_unvotekappaavv_avg = mean(kappavv, na.rm = TRUE),
                   strcomp_unvotekappaavv_low = min(kappavv, na.rm = TRUE),
                   strcomp_unvotepivv_avg = mean(pivv, na.rm = TRUE),
                   strcomp_unvotepivv_low = min(pivv, na.rm = TRUE),
                   strcomp_sscorekappava_avg = mean(kappava, na.rm = TRUE),
                   strcomp_sscorekappava_low = min(kappava, na.rm = TRUE),
                   strcomp_sscorekappaba_avg = mean(kappaba, na.rm = TRUE),
                   strcomp_sscorekappaba_low = min(kappaba, na.rm = TRUE),
                   strcomp_sscorepiva_avg = mean(piva, na.rm = TRUE),
                   strcomp_sscorepiva_low = min(piva, na.rm = TRUE),
                   strcomp_sscorepiba_avg = mean(piba, na.rm = TRUE),
                   strcomp_sscorepiba_low = min(piba, na.rm = TRUE),
                   strcomp_peacelevel_avg = mean(peacelevel, na.rm = TRUE),
                   strcomp_peacelevel_low = min(peacelevel, na.rm = TRUE),
                   dist_contigprop = mean(landcontig, na.rm = TRUE),
                   dist_max = max(capdist, na.rm = TRUE),
                   dist_maxlog = log(dist_max + 1),
                   dist_avg = mean(capdist, na.rm = TRUE),
                   dist_avglog = log(dist_avg + 1),
                   .by = c(atopid, year))

df <- dplyr::left_join(df, dyad_year)
```

# Create EVs

## Strategic compatibility

```{r create-threats}
# DOE scores
doe <- rio::import(paste0(here::here(), "/inst/extdata/DOE/doe-dyad-2.0.csv")) %>%
  dplyr::rename(ccode1 = ccode_a,
                ccode2 = ccode_b)

# s-scores from ATOP
atop_sscore <- rio::import(paste0(here::here(), "/inst/extdata/ATOP/atop-sscore.csv")) %>%
  dplyr::select(year, ccode1, ccode2, s_un_atop, s_wt_atop, kappa_atop, pi_atop)
atop_sscore <- atop_sscore %>%
  bind_rows(atop_sscore %>% rename(ccode1 = ccode2, ccode2 = ccode1), .)

# Updated strategic rivalry
tss <- tss_rivalries %>%
  bind_rows(tss_rivalries %>% rename(ccode1 = ccode2, ccode2 = ccode1), .) %>%
    arrange(tssr_id) %>%
    select(tssr_id, rivalry, ccode1, ccode2, start, end, positional, spatial, ideological, interventionary, principal, aprin) %>%
    rowwise() %>%
    mutate(year = list(seq(start, end))) %>%
    # Unnest the list, which will expand the data.
    unnest(c(year)) %>%
    # Minor note: ccode change for Austria, post-1918 for rivalryno 79.
    mutate(ccode1 = ifelse(ccode1 == 300 & year >= 1919, 305, ccode1),
           ccode2 = ifelse(ccode2 == 300 & year >= 1919, 305, ccode2),
           rival_strat = ifelse((positional == 1 | spatial == 1 | ideological == 1 | interventionary == 1 | principal == 1 | aprin == 1), 1, 0)) |>
  select(year, ccode1, ccode2, rival_strat)

# Prep peace data for directed dyad merge
peace_full <- peace3 %>%
  bind_rows(peace3 %>% rename(ccode1 = ccode2, ccode2 = ccode1), .)

# Core  
dyads_threat <- create_dyadyears(system = "cow",
                                 subset_years = c(1970:2014),
                                 directed = TRUE) %>%
  add_atop_alliance() %>%
  add_cow_majors() %>%
  add_nmc() %>%
  add_sdp_gdp() %>%
  add_contiguity() %>%
  add_minimum_distance() %>%
  add_capital_distance() %>%
#  add_strategic_rivalries() %>%
  add_fpsim() %>%
  dplyr::left_join(., atop_sscore) %>%
  dplyr::left_join(., doe) %>%
  dplyr::left_join(., peace_full) %>%
  dplyr::left_join(., tss) %>%
  dplyr::distinct() %>%
#  dplyr::rename(gdp2 = wbgdp2011est2) %>%
#  dplyr::mutate(gdp2_ratio = gdp2/sum(gdp2, na.rm = TRUE), .by = year) %>%
  dplyr::mutate(prd_general = dplyr::case_when(conttype >= 1 ~ 1,
                                               conttype == 0 & cowmaj1 == 1 ~ 1,
                                               conttype == 0 & cowmaj2 == 1 ~ 1,
                                               TRUE ~ 0)) |>
  dplyr::mutate(prd_threat = dplyr::if_else(conttype %in% c(1:3) | cowmaj2 == 1, 1, 0)) |>
  dplyr::group_by(year, dyad = pmin(ccode1, ccode2), dyad_rev = pmax(ccode1, ccode2)) |>
  dplyr::mutate(atop_defense_sum = sum(atop_defense)) |>
  dplyr::ungroup() |>
  dplyr::mutate(atop_defense_type = dplyr::case_when(atop_defense_sum == 2 ~ "symmetric",
                                                     atop_defense_sum == 1 ~ "asymmetric",
                                                     atop_defense_sum == 0 ~ "none")) |>
  select(-dyad, -dyad_rev, -atop_defense_sum) |> 
  dplyr::mutate(rival_strat = tidyr::replace_na(rival_strat, 0),
                sscore_below = dplyr::if_else(kappa_atop <= median(kappa_atop[prd_general == 1], na.rm = TRUE),
                                              1, 0),
                threatenviro = dplyr::if_else(rival_strat == 1 |
                                                peacelevel < 0.25 |
                                                (peacelevel == 0.25 & atop_defense_type == "none") |
                                                (prd_threat == 1 & sscore_below == 1 & atop_defense_type == "none"),
                                              1, 0),
                threatenviro = tidyr::replace_na(threatenviro, 0)) %>%
  dplyr::select(year, ccode1, 
                ccode2, cinc2,
                threatenviro,
                rival_strat, peacelevel, prd_threat, sscore_below, atop_defense_type) %>%
  dplyr::rename(rival = ccode2)

saveRDS(dyads_threat, paste0(here::here(), "/data/","dyad_threat.rds"))

# Merge into country-alliance-year df to do the math
threat <- dplyr::left_join(country_year, dyads_threat,
                                 by = join_by(ccode == ccode1,
                                              year == year)) %>%
  dplyr::select(atopid, year, ccode, rival, threatenviro, cinc2) %>%
  dplyr::distinct() %>%
  dplyr::mutate(number_allies = dplyr::n_distinct(ccode, na.rm = TRUE),
                .by = c(atopid, year)) %>%
  dplyr::mutate(number_threatened = sum(threatenviro, na.rm = TRUE),
                .by = c(atopid, year, rival)) %>%
  dplyr::filter(number_threatened > 0) %>%
  dplyr::select(-ccode) %>%
  dplyr::distinct() %>%
  dplyr::mutate(shared_threat = dplyr::if_else(number_threatened == number_allies, 1, 0)) %>%
  dplyr::select(-threatenviro) %>%
  dplyr::distinct() %>%
  dplyr::summarise(strcomp_cinc2 = sum(cinc2, na.rm = TRUE),
                   .by = c(atopid, year, shared_threat)) %>%
  tidyr::pivot_wider(names_from = shared_threat, values_from = strcomp_cinc2, values_fill = 0) %>%
  tidyr::pivot_longer(names_to = "shared_threat", values_to = "strcomp_cinc2", cols = c('0', '1')) %>%
  dplyr::mutate(shared_threat = as.numeric(shared_threat)) %>%
  dplyr::summarise(strcomp_cinc_total = strcomp_cinc2[shared_threat == 1],
                   strcomp_cinc_ratio = strcomp_cinc2[shared_threat == 1]/sum(strcomp_cinc2, na.rm = TRUE),
                   .by = c(atopid, year))

# Create list of number of threats faced in an alliance
threat_diversity <- dplyr::left_join(country_year, dyads_threat,
                                 by = join_by(ccode == ccode1,
                                              year == year)) %>%
  dplyr::select(atopid, year, ccode, rival, threatenviro, cinc2) %>%
  dplyr::distinct() %>%
  dplyr::mutate(number_allies = dplyr::n_distinct(ccode, na.rm = TRUE),
                .by = c(atopid, year)) %>%
  dplyr::mutate(number_threatened = sum(threatenviro, na.rm = TRUE),
                .by = c(atopid, year, rival)) %>%
  dplyr::filter(number_threatened > 0) %>%
  dplyr::select(-ccode) %>%
  dplyr::distinct() %>%
  dplyr::mutate(shared_threat = dplyr::if_else(number_threatened == number_allies, 1, 0)) %>%
  dplyr::select(atopid, year, rival) %>%
  dplyr::distinct() %>%
  dplyr::summarise(rival_count = dplyr::n(),
                   .by = c(atopid, year))

# Merge into main df
df <- dplyr::left_join(df, threat) %>%
  dplyr::left_join(., threat_diversity)
```

## Hierarchy

For the hierarchy EV, we need SIPRI bilateral arms trade data. The following chunk scrapes SIPRI's website, processes and cleans it, and merges it all into a single directed-dyad-year dataframe. To save time, this chunk is not evaluated, but the following chunk loads its output.

```{r create-sipri, eval = FALSE}
# initial empty list
my_list <- list()

# define function
func <- function(country){
  res <- httr::POST(url = 'https://armstrade.sipri.org/armstrade/html/export_values.php', 
                  body = list(`low_year` = '1970',
                              `high_year` = '2014',
                              `import_or_export` = 'import',
                              `country_code` = country,
                              `summarize` = 'country',
                              `filetype` = 'csv'))

  sipri <- httr::content(res, "text") %>%
    read_csv(show_col_types = FALSE) %>%
    dplyr::slice(1:(n() - 2)) %>%
    as.data.frame() %>%
    janitor::row_to_names(row_number = 10,
                          remove_rows_above = TRUE) %>%
    janitor::clean_names() %>%
    dplyr::select(-c(total, na_2)) %>%
    dplyr::rename("sender" = `na`) %>%
    tidyr::pivot_longer(!sender,
                        names_to = "year",
                        values_to = "value") %>%
    dplyr::mutate(value = dplyr::if_else(value == 0, 0.5, value),
                  value = dplyr::if_else(is.na(value), 0, value),
                  year = as.numeric(stringr::str_extract(year, "(\\d)+")))

  # save each year as a dataframe in a list
  my_list[paste(country)] <<- list(sipri) 
}

# List of countries in SIPRI using their abbreviations
country <- c("AFG", "ALB", "ALG", "ANG", "ARG", "ARM", "AUS", "AST", "AZB", "BAS", "BAH", "BAN", "BAR", "BLR", "BEL", "BLZ", "BEN", "BHU", "BOL", "BOS", "BOT", "BRA", "BRU", "BUL", "BF", "BDI", "CMB", "CAM", "CAN", "CAR", "CHA", "CHE", "CHI", "COL", "COM", "CON", "COS", "IVO", "CRO", "CUB", "CYP", "CZR", "DRC", "DEN", "DJI", "DOM", "ECU", "EGY", "SAL", "EQU", "ERI", "EST", "ETH", "FJI", "FIN", "FRA", "GAB", "GAM", "GEO", "FRG", "GHA", "GRE", "GUA", "GUI", "GUY", "HON", "HUN", "ICE", "IND", "INS", "IRA", "IRQ", "IRE", "ISR", "ITA", "JAM", "JAP", "JOR", "KAZ", "KEN", "KSV", "KUW", "KYR", "LAO", "LAT", "LEB", "LES", "LIB", "LYA", "LIT", "LUX", "MAD", "MWI", "MAL", "MLV", "MLI", "MTA", "MAR", "MRA", "MAU", "MEX", "MON", "MOR", "MOZ", "MYA", "NAM", "NEP", "NET", "NZ", "NIC", "NIR", "NIG", "KON", "MAC", "NOR", "OMA", "PAK", "PAL", "PAN", "PAP", "PAR", "PER", "PHI", "POL", "POR", "QAT", "ROM", "RUS", "RWA", "SAM", "SAU", "SEN", "SER", "SEY", "SIE", "SIN", "SLK", "SLO", "SOL", "SOM", "SA", "KOS", "SSD", "SPA", "SRI", "SUD", "SUR", "SWE", "SWI", "SYR", "TAI", "TAJ", "TAN", "THA", "ET", "TOG", "TON", "TRI", "TUN", "TUR", "TRK", "UAE", "UGA", "UKR", "UK", "USA", "URU", "UZB", "VEN", "VN", "YEM", "ZAM", "ZIM")

# Countries I took out because they had no imports and thus break the function
## BF, MTG
# loop through all years
for(i in country){
  func(country = i)
}

# SIPRI has unusual acronyms, so we make a match set there for the English names so that the countrycode package can get us the ccodes
cnames <- rio::import(paste0(here::here(), "/inst/extdata/sipri_names.csv"))

# bind nested datasets into a complete dataframe
sipri <- do.call(rbind.data.frame, my_list) %>%
  tibble::rownames_to_column(var = "receiver") %>%
  dplyr::mutate(receiver = stringr::str_extract(receiver, ".*(?=\\.)")) %>%
  dplyr::left_join(., cnames,
                   by = join_by(receiver == sipri_name)) %>%
  dplyr::select(-receiver) %>%
  dplyr::rename(receiver = string_name) %>%
  dplyr::left_join(., countrycode::codelist_panel[, c("country.name.en", "year", "cown")],
                   by = join_by(receiver == country.name.en,
                                year == year)) %>%
  dplyr::rename(ccode2 = cown) %>%
  dplyr::left_join(., countrycode::codelist_panel[, c("country.name.en", "year", "cown")],
                   by = join_by(sender == country.name.en,
                                year == year)) %>%
  dplyr::rename(ccode1 = cown) %>%
  dplyr::mutate(ccode1 = dplyr::if_else(receiver == "Serbia", 345, ccode1),
                ccode2 = dplyr::if_else(sender == "Serbia", 345, ccode2)) %>%
  dplyr::select(year, sender, ccode1, receiver, ccode2, value) %>%
  dplyr::filter(ccode1 != ccode2) %>%
  dplyr::distinct()

saveRDS(sipri, paste0(here::here(), "/data/sipri_dyad-year.rds"))
```

Now we can make the hierarchy variable

-   Laplacian centrality - the drop in the Laplacian energy (i.e. sum of squares of the eigenvalues in the Laplacian matrix) of the graph when the vertex is removed (Cordeiro et al 2018, Boley et al 2018)

-   Cluster rank: quantifies the influence of a node by taking into account not only its direct influence (measured by the number of its followers) and influences of its neighbors, but also its clustering coefficient (Chen et al 2013)

-   Leader rank: nodes with larger final scores are considered to be more influential in spreading (Lu et al 2011)

-   IVI: integrates the most important local (i.e. degree centrality and ClusterRank), semi-local (i.e. neighborhood connectivity and local H-index) and global (i.e. betweenness centrality and collective influence) centrality measures in such a way that both synergizes their effects and removes their biases.

-   spreading score: an integrative score made up of four different centrality measures including ClusterRank, neighborhood connectivity, betweenness centrality, and collective influence. Also, Spreading score reflects the spreading potential of each node within a network

-   hubness score: n integrative score made up of two different centrality measures including degree centrality and local H-index. Also, Hubness score reflects the power of each node in its surrounding environment and is one of the major components of the IVI.

```{r create-hierarchy}
sipri <- readRDS(paste0(here::here(), "/data/sipri_dyad-year.rds"))

# initial empty list
my_list <- list()

# define function
func <- function(hierarchy_year){
  # centiserve and CINNA package functions
  network <- sipri %>%
    dplyr::filter(year == hierarchy_year) %>%
    dplyr::select(ccode1, ccode2, value) %>%
    dplyr::rename(weight = value) %>%
    igraph::graph_from_data_frame(directed = TRUE)

      laplace <- centiserve::laplacian(network, mode = "out") %>%
        as.data.frame() %>%
        dplyr::rename(laplace = ".") %>%
        tibble::rownames_to_column(var = "ccode")
    
      crank <- centiserve::clusterrank(network, directed = TRUE) %>%
        as.data.frame() %>%
        dplyr::rename(clustrank = ".") %>%
        tibble::rownames_to_column(var = "ccode")
    
      lrank <- centiserve::leaderrank(network) %>%
        as.data.frame() %>%
        dplyr::rename(leadrank = ".") %>%
        tibble::rownames_to_column(var = "ccode")

      cinna <- CINNA::calculate_centralities(network, include = c("Laplacian Centrality", "Leverage Centrality"),
                                             weights = igraph::E(test)$weight) %>%
        as.data.frame() %>%
        dplyr::rename(laplace2 = Laplacian.Centrality,
                      leverage = Leverage.Centrality) %>%
        tibble::rownames_to_column(var = "ccode")
      
  # influential package functions, which do not allow edges with weight 0, so those are dropped
  network <- sipri %>%
    dplyr::filter(year == hierarchy_year) %>%
    dplyr::filter(value > 0) %>%
    dplyr::select(ccode1, ccode2, value) %>%
    dplyr::rename(weight = value) %>%
    igraph::graph_from_data_frame(directed = TRUE)
  
    vertices <- igraph::V(network)
    
    ivi <- influential::ivi(graph = network,
                            vertices = vertices,
                            directed = TRUE,
                            mode = "out") %>%
      as.data.frame() %>%
      dplyr::rename(ivi = ".") %>%
      tibble::rownames_to_column(var = "ccode")
    
    spread <- influential::spreading.score(graph = network,
                                           vertices = vertices,
                                           directed = TRUE,
                                           mode = "out") %>%
      as.data.frame() %>%
      dplyr::rename(spread = ".") %>%
      tibble::rownames_to_column(var = "ccode")
    
    hub <- influential::hubness.score(graph = network,
                                      vertices = vertices,
                                      directed = TRUE,
                                      mode = "out") %>%
      as.data.frame() %>%
      dplyr::rename(hub = ".") %>%
      tibble::rownames_to_column(var = "ccode")

  scores <- dplyr::left_join(laplace, crank) %>%
    dplyr::left_join(., lrank) %>%
    dplyr::left_join(., ivi) %>%
    dplyr::left_join(., cinna) %>%
    dplyr::left_join(., spread) %>%
    dplyr::left_join(., hub)

  # save each year as a dataframe in a list
  my_list[paste(hierarchy_year)] <<- list(scores) 
}

# loop through all years
hierarchyyear <- sort(unique(sipri$year))
for(i in hierarchyyear){
  func(hierarchy_year = i)
}

# bind nested datasets into a complete dataframe
hierarchy <- do.call(rbind.data.frame, my_list) %>%
  tibble::rownames_to_column(var = "year") %>%
  dplyr::mutate(year = as.numeric(stringr::str_extract(year, "(\\d)+")),
                ccode = as.numeric(ccode))

# merge it into country-alliance-year data to make the aggregate measures
hierarchy <- dplyr::left_join(country_year, hierarchy) |>
  dplyr::mutate(dplyr::across(dplyr::everything(), ~replace_na(.x, 0))) |>
  dplyr::summarise(hier_laplace = mean(max(laplace, na.rm = TRUE) - laplace),
                   hier_laplace2 = mean(max(laplace2, na.rm = TRUE) - laplace2),
                   hier_crank = mean(max(clustrank, na.rm = TRUE) - clustrank),
                   hier_lrank = mean(max(leadrank, na.rm = TRUE) - leadrank),
                   hier_leverage = mean(max(leverage, na.rm = TRUE) - leverage),
                   hier_ivi = mean(max(ivi, na.rm = TRUE) - ivi),
                   hier_spread = mean(max(spread, na.rm = TRUE) - spread),
                   hier_hub = mean(max(hub, na.rm = TRUE) - hub),
                   .by = c(year, atopid))

df <- dplyr::left_join(df, hierarchy)
```

# Existing ATOP variables

```{r load-data}
# Alliance level data
atop_alliance <- rio::import(paste0(here::here(), "/inst/extdata/ATOP/atop5_1a.csv")) %>%
  dplyr::filter(begyr < 2015 &
                  (endyr > 1970 |
                     endyr == 0)) |>
  dplyr::mutate(endyr = dplyr::if_else(endyr == 0,
                                       2023,
                                       endyr)) |>
  dplyr::select(atopid, bilat, defense, terrres, milcon, milaid, intcom) |>
  dplyr::distinct()

# Institutionalization data
atop_inst <- rio::import(paste0(here::here(), "/inst/extdata/ATOP/atopinst5_1.csv")) |> 
  dplyr::select(atopid, milinst, formal)

# Depth data from Alley 2021
atop_depth <- rio::import(paste0(here::here(), "/inst/extdata/atop-milsup-latent-depth.csv")) |> 
  dplyr::select(atopid, dplyr::starts_with("latent"))

# Merge these two and reshape to alliance-year
atop_vars <- dplyr::left_join(atop_alliance, atop_inst)
atop_vars <- dplyr::left_join(atop_vars, atop_depth)

# Merge all the atop vars into the main df
df <- dplyr::left_join(df, atop_vars)

# Benson and Clinton scores
benclint <- rio::import(paste0(here::here(), "/inst/extdata/Benson-Clinton_JCR_2014/AllianceDataScoreJCR_RR.csv")) %>%
   dplyr::select(atopid, dplyr::ends_with(".score"))

# Merge
df <- dplyr::left_join(df, benclint) |>
  dplyr::distinct()

df[sapply(df, is.infinite)] <- NA
```

# Save data

```{r save}
df |>
  saveRDS(paste0(here::here(), "/data/02_EV.rds"))
```

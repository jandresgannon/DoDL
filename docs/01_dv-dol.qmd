---
title: '01 Dependent Variable - Division of Labor'
author:
  - name: J Andrés Gannon
    email: "juan.gannon@vanderbilt.edu"
    url: jandresgannon.com
    affiliation: Vanderbilt University
format:
  pdf:
    fig-format: png
    thanks: test text here
editor: source
execute:
  echo: false
  warning: false
  cache: true
date: "`r format(Sys.Date(), '%B %d, %Y')`"
header-includes:
- \usepackage{tikz}
- \usepackage{pgfplots}
- \pgfplotsset{compat=newest}
- \usetikzlibrary{plotmarks}
- \usetikzlibrary{arrows.meta}
- \usepgfplotslibrary{patchplots}
- \usepackage{grffile}
- \usepackage{caption}
- \usepackage[utf8]{inputenc}
- \usepackage[doublespacing]{setspace}
- \AtBeginEnvironment{tabular}{\singlespacing}
- \usepackage{float}
- \usepackage{multirow}
- \usepackage{tablefootnote}
- \usepackage{pifont}
- \usepackage{newunicodechar}
- \usepackage{booktabs}
- \usepackage{tabularx}
- \newunicodechar{✓}{\ding{51}}
bibliography: ForceStructure.bib
---

```{r knitr_options, echo = FALSE, warning = FALSE, cache = FALSE}
library(knitr)
library(kableExtra)
library(magrittr)
library(ggplot2)
```

# Load data

## rDMC

```{r load data}
rdmc_long <- readRDS(file = paste0(here::here(), '/data/rDMC_long_v1.rds'))

rdmc_wide <- readRDS(file = paste0(here::here(), '/data/rDMC_wide_v1.rds'))

# Keep a separate df of just the ID vars since ccode and cname were added later and are not included in the function
id_vars <- rdmc_wide %>%
  dplyr::select(year, stateabb, country, ccode)
```

## Alliances

We want to get columns for each alliance that are dummy variables indicating whether that country was in that alliance

```{r}
# Load
atop_member <- rio::import(paste0(here::here(), "/inst/extdata/ATOP/atop5_1m.csv")) %>%
  dplyr::filter(yrexit > 1970 |
                  yrexit == 0) %>%
  dplyr::mutate(yrexit = dplyr::if_else(yrexit == 0,
                                        2023,
                                        yrexit)) %>%
  dplyr::select(atopid, member, yrent, yrexit) %>%
  dplyr::distinct() %>%
  dplyr::mutate(row = dplyr::row_number()) %>%
  dplyr::group_by(row, atopid, member) %>%
  dplyr::reframe(year = seq(yrent, yrexit)) %>%
  dplyr::ungroup() %>%
  dplyr::select(-row) %>%
  dplyr::rename(ccode = 'member')

# Merge the alliance-year-member df with the wide version of the data and then create a column for alliance-year since that's what we're filter by when making the DoL index
df <- dplyr::left_join(rdmc_wide, atop_member) %>%
  dplyr::mutate(atopid = dplyr::if_else(is.na(atopid),
                                              0, atopid)) %>%
  tidyr::unite(col = "alliance_year",
               atopid, year,
               sep = "-",
               remove = FALSE) %>%
  dplyr::select(-atopid)

# Take out unnecessary ID columns and create unique identifier vectors. The unit of analysis is the alliance-year and units within that are the country
df <- df %>%
  dplyr::select(-stateabb, -ccode, -year) %>%
  dplyr::distinct()

# Create vector of countries and years
df_allianceyear <- unique(df$alliance_year)
df_country <- unique(df$country)
```

# Alliance DoL

We're going to test the alliance-level DoL variables, using a single alliance-year as a sample

Modularity Q - a measure of how well links and interactions can be separated into different modules. Large networks, with many species and links, allow for more combinations of species-inmodules, leading to higher values of Q

Weighted nestedness - A nestedness version that considers interaction frequencies (and is hence weighted), proposed by Galeano et al. (2007) and implemented in wine. It ranges between 1 (perfect nestedness) and 0 (perfect chaos). Note that this is the OPPOSITE interpretation of nestedness temperature!

Weighted NODF - Another quantitative (=weighted) index for nestedness, building on NODF (see nestednodf). High values indicate nestedness. According to the analysis of Almeida-Neto et al. (2008, 2010), NODF is more consistent and "better" than usual measures of nestedness.

Linkage density - Marginal totals-weighted diversity of interactions per species (quantitative). Actually, this is computed as the average of vulnerability and generality (Bersier et al. 2002). Does not respond to setting weighted=FALSE.

Weighted connectance - Realised proportion of possible links (Dunne et al. 2002): sum of links divided by number of cells in the matrix (= number of higher times number of lower trophic level species). This is the standardised number of species combinations often used in co-occurrence analyses (Gotelli & Graves 1996).

H2 - network-level measure of specialisation. It ranges between 0 (no specialisation) and 1 (complete specialisation). More specifically, H2' is a measure of discrimination, i.e. calculated in comparison to no specialisation (see H2fun for details.)

Weighted cluster coefficient - (weighted) average cluster coefficients of its members. The cluster coefficient for each species, in turn, is simply the number of realised links divided by the number of possible links.

Niche overlap - Mean similarity in interaction pattern between species of that level, calculated by default as Horn's index (use dist to change this.). Values near 0 indicate no common use of niches, 1 indicates perfect niche overlap.

Functional complementarity - This measure of niche complementarity (as described by Devoto et al. 2012), is computed as the total branch length of a "functional dendrogram" based on qualitative differences of interactions of one level with the other. Thus, the "functional" aspect of functional complementarity refers to the function of sharing interactions. Should be highly correlated with niche overlap, only binary.

Partner diversity - (Weighted) mean Shannon diversity of the number of interactions for the species of that level.

Vulnerability - (Weighted) mean effective number of LL species per HL species (generality; HL species per LL species for vulnerability), weighted by their marginal totals (row sums); see Tylianakis et al. (2007) and Bersier et al. (2002). This is identical to exp("partner diversity", i.e., simply the Jost (2006)-recommended version of diversity.

```{r}
# initial empty list
my_list <- list()

# define function
func <- function(df_allianceyear){
  test <- df %>%
    dplyr::filter(alliance_year == df_allianceyear)
  names <- c('country', 'alliance_year')

  test$obs <- apply(test[ , names], 1, paste, collapse = "_")

  test <- test[ , !(names (test) %in% names)]

  test <- test %>% tibble::column_to_rownames(var = "obs")

  scores <- bipartite::networklevel(test,
                                    index = "quantitative",
                                    level = "lower") %>%
    as.data.frame() %>%
    tibble::rownames_to_column()

  # save each year as a dataframe in a list
  my_list[paste("scores", df_allianceyear)] <<- list(scores) 
}

# loop through all years
for(i in df_allianceyear){
  func(df_allianceyear = i)
}

# bind nested datasets into a complete dataframe
d_by_year <- do.call(rbind.data.frame, my_list)

# Rename as the method used
df <- d_by_year %>%
  as.data.frame() %>%
  tibble::rownames_to_column(var = "id") %>%
  tidyr::separate(id, into = c("atopid", "year"), sep = "-") %>%
  dplyr::mutate(atopid = gsub("[^0-9.-]", "", atopid),
                year = gsub("\\..*", "", year)) %>%
  dplyr::mutate(year = as.numeric(year)) %>%
  dplyr::rename("score" = ".") %>%
  dplyr::group_by(atopid, year) %>%
  tidyr::pivot_wider(names_from = rowname,
                     values_from = score) %>%
  dplyr::ungroup() %>%
  janitor::clean_names() %>%
  dplyr::rename(dol_modq = modularity_q,
                dol_nested = weighted_nestedness,
                dol_nodf = weighted_nodf,
                dol_linkdense = linkage_density,
                dol_connectance = weighted_connectance,
                dol_h2 = h2,
                dol_clustcoef = weighted_cluster_coefficient_ll,
                dol_nicheolap = niche_overlap_ll,
                dol_funccomplement = functional_complementarity_ll,
                dol_partnerdiverse = partner_diversity_ll,
                dol_vulnerab = vulnerability_ll)
```

## Basic visuals

```{r}
df |>
  dplyr::select(dplyr::starts_with("dol")) |>
  dplyr::rename_with(~stringr::str_remove(., "dol_")) |>
  GGally::ggpairs()

df |>
  ggplot(aes(x = dol_h2)) +
  geom_histogram(bins = 30, color = "black", fill = "gray") +
  geom_vline(aes(xintercept = mean(dol_h2, na.rm = TRUE)), 
             linetype = "dashed", linewidth = 0.6) +
  annotate("text",
           x = mean(df$dol_h2, na.rm = TRUE) + 0.1,
           y = 200,
           label = paste("Mean =", round(mean(df$dol_h2, na.rm = TRUE), 3))) +
  scale_x_continuous(breaks = scales::pretty_breaks()) +
  labs(title = "Division of Labor Across Alliance-Years",
       x = "Division of Labor",
       y = "Number of alliance-years") +
  theme_classic() +
  theme(text = element_text(size = 10))
```

# Save

```{r}
df |>
  dplyr::distinct() |>
  saveRDS(paste0(here::here(), "/data/","01_DV.rds"))
```

# Archive

## Other testing

Test some other packages using NATO 2004

```{r}
#| eval: false

test <- df %>%
  dplyr::filter(alliance_year == "3180-2004") %>%
  dplyr::select(-alliance_year) %>%
  replace(is.na(.), 0) %>%
#  janitor::adorn_percentages(denominator = "col",
#                             na.rm = TRUE) %>%
  tibble::column_to_rownames(var = "country") %>%
  replace(is.na(.), 0)

NIMAA::plotBipartiteInteractive(test)
NIMAA::findCluster(test,
                   part = 1,
                   method = "all", # all available clustering methods
                   normalization = TRUE, # normalize the input matrix
                   rm_weak_edges = FALSE, # remove the weak edges in graph
                   #  rm_method = 'delete', # delete the weak edges instead of lowering their weights to 0.
                   threshold = 'median', # Use median of edges' weights as threshold
                   set_remaining_to_1 = TRUE, # set the weights of remaining edges to 1
  )

## See the cluster of similar countries within an alliance
test %>%
  bipartite::computeModules() %>%
  bipartite::plotModuleWeb()

```

## Null models

https://fukamilab.github.io/BIO202/09-B-networks.html

Pasquaretta and Jeanson (2018) recommend "using Patefield's algorithm, which generates random networks preserving marginal sums (i.e., worker performance and task need are maintained) but where links are randomly assigned between workers and tasks." (p 344)

## Visuals

https://rdrr.io/github/jgalgarra/kcorebip/

## Within-alliance modularity

Modularity is a way of thinking about who has an important role in an alliance network. It's a form of specialization in that it describes countries that have similar roles, where roles are determined by the military capabilities they possess. The interaction matrices within each module are similar, indicating those countries do similar things.

A module is a group of states within an alliance that are more closely connected to each other than the countries in other modules. A way of thinking about modules is that countries in the same module are performing the same role (Guimera 2005)

\*\*\*Null model is important because it's what allows you to compare alliances of different sizes. You compare the real alliance to null simulations of that same matrix and those figures can be compared with one another (Vazquez & Aizen, 2003; Bluthgen et al., 2008; Dormann et al., 2009)

C score is a standardized measure that refers to among-module role (meaning the entire alliance network). If all your teks are within your module, your C score is 0. If your teks are evenly distributed across all modules, your C score is 1 Z score is a standardized measure that refers to within module role (meaning within its module within the alliance)

Types of countries (Olesen et al 2007 from biology) peripheral country = low C and low Z. It's a specialist who really only does one thing connector country = high C and low Z. It glues modules together and is important for network coherence module hub country = low C and high Z. It is important to its own module network hub country = high C and high Z. It is important to its module and overall

```{r, eval=FALSE}
# Calculate cut off thresholds for cz scores
## Computer scores
modules <- test %>%
  bipartite::computeModules() %>%
  bipartite::czvalues(weighted = TRUE,
                      level = "lower")

## run null models to see what it would be in 1000 random simulations
nulls <- bipartite::nullmodel(modules,
                              N = 1000)
null.mod.list <- sapply(nulls, bipartite::computeModules)
null.cz <- lapply(null.mod.list, bipartite::czvalues)

## computer 95% for c values across all species in nulls
null.cs <- sapply(null.cz, function(x) x$c)
## identify threshold for uncommonly high c-values
cval <- 1 - as.numeric(quantile(null.cs,
                            0.95))

## repeat the last 2 steps for z-values
null.zs <- sapply(null.cz, function(x) x$z)
zval <- as.numeric(quantile(null.zs,
                            0.95,
                            na.rm = TRUE))

# Plot with those cut offs
modules %>%
  bipartite::computeModules() %>%
  bipartite::czvalues(weighted = TRUE,
                      level = "lower") %>%
  as.data.frame() %>%
  dplyr::mutate(c = 1 - c) %>%
  tibble::rownames_to_column(var = "country") %>%
  ggplot(aes(x = c,
             y = z,
             label = country)) +
  geom_point(size = 4) +
  ggrepel::geom_text_repel(size = 10) +
  geom_vline(xintercept = cval,
             color = "red",
             size = 1) +
  geom_hline(yintercept = zval,
             color = "red",
             size = 1) +
  labs(x = "Country Specialization",
       y = "Country Uniqueness",
       caption = "Red lines indicate critical values calculated as 95% quantiles from 1,000 within-alliance simulations.") +
  theme_minimal(base_size = 30)
```

## Visuals

```{r, eval=FALSE}
# Viz as matrix
sample %>%
  bipartite::visweb(type = "diagonal",
                    labsize = 3)

# Viz as sankey
sample %>%
  bipartite::plotweb(labsize = 2,
                     col.interaction = "red",
                     bor.col.interaction = "gray50",
                     y.lim = c(-0.1, 3),
                     text.rot = 90)
```
